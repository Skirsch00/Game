import java.util.*;
import java.io.*;
public class twentyFourtyEight
{
    //challenge system. get board to a certain state
    //loot box system with different displays
    public static int score;
    public static int testScore = getScores(2);
    public static int highscore;
    public static String user = getUser();
    /*public static String uSer2 = getUsers(2);
    public static String user3 = getUsers(3);
    public static String user4 = getUsers(4);
    public static String user5 = getUsers(5);
    public static String pw = getPw();*/
    public static int exp = getScores(3);
    public static int lvl = getScores(4);
    //public static String chosenUser = user1;
    public static void main (String [] args)
    {
        Scanner scan = new Scanner(System.in);
        boolean choosingMenu = true;
        //chooseUser();
        if (user.equals("NEW USER"))
        {
            System.out.println("~=~ 2 0 4 8 ~=~");
            System.out.println();
            System.out.println("Welcome to 2048! Enter your username! (You may change it later.)");
            String madeUser = scan.nextLine();
            madeUser = madeUser.toUpperCase();
            saveUser(madeUser);
            user = getUser();
        }
        while (choosingMenu)
        {
            wipePage();
            choosingMenu = true;
            System.out.println("~=~ 2 0 4 8 ~=~");
            System.out.println();
            System.out.println(user+" - LEVEL "+lvl);
            expDisplay(exp);
            System.out.println();
            System.out.println("1 - PLAY");
            System.out.println("2 - DISPLAYS");
            System.out.println("3 - LOOT");
            System.out.println("4 - CHALLENGES");
            //System.out.println("5 - LEADERBOARD");
            System.out.println("5 - PROFILE");
            //System.out.println("7 - USERS");
            System.out.println("6 - QUIT");
            System.out.println();
            System.out.println("Enter the corresponding number for each option.");
            String input = scan.nextLine();

            if (input.equals("1"))
            {
                highscore = getScores(0);
                score = getScores(1);
                //testScore = score;
                wipePage();
                play();
            }
            /*else if (input.equals("7"))
            {
            wipePage();
            chooseUser();
            }*/
            else if (input.equals("5"))
            {
                boolean profileChoosing = true;
                int expToNextLvl = 500*exp+testScore;
                final int LEVEL_EXP = 5000;
                int totalExp = (lvl-1)*LEVEL_EXP+expToNextLvl;
                while (profileChoosing)
                {
                    wipePage();
                    System.out.println("~=~ 2 0 4 8 ~=~");
                    System.out.println();
                    System.out.println("USERNAME: " + user);
                    System.out.println("LEVEL: " + lvl);
                    System.out.println("EXPERIENCE: " + expToNextLvl + " / " + LEVEL_EXP);
                    System.out.println("TOTAL EXPERIENCE: " + totalExp);
                    System.out.println();
                    System.out.println("1 - CHANGE USERNAME");
                    System.out.println("2 - BACK");
                    System.out.println();
                    System.out.println("Enter the corresponding number for each option.");
                    String profileInput = scan.nextLine();
                    if (profileInput.equals("1"))
                    {
                        System.out.println("Enter new username.");
                        user = scan.nextLine();
                        user = user.toUpperCase();
                        saveUser(user);
                    }
                    else if (profileInput.equals("2"))
                    {
                        profileChoosing = false;
                    }
                }
            }
            else if (input.equals("6"))
            {
                wipePage();
                System.out.println("~=~ 2 0 4 8 ~=~");
                System.out.println();
                System.out.println("Thanks for playing!");
                choosingMenu = false;
                System.exit(0);
            }
        }
    }

    public static void play ()
    {
        Scanner scan = new Scanner(System.in);
        final int NO_NUMBER = 0;
        boolean valid = false;
        boolean validInput = false;
        boolean gameOver = false;
        boolean playOn = true;
        boolean newBoard = true;

        backToMenu:
        while (playOn)
        {
            boolean possibleTurn = false;
            int[][] grid = new int[4][4];
            grid = getBoard();

            //score = 0;
            for (int y = 0; y < grid.length; y++)
            {
                for (int x = 0; x < grid.length; x++)
                {
                    if (grid[y][x] != 0)
                        newBoard = false;
                }
            }
            if (newBoard)
            {
                addNumber(grid);
                addNumber(grid);
            }
            display(grid);

            while (!gameOver)
            {
                System.out.println();
                if (testScore > 500)
                {
                    testScore -= 500;
                    exp += 1;
                    if (exp == 11)
                    {
                        exp = 0;
                        lvl++;
                    }
                }
                System.out.println("Enter either W (up), A (left), S (down), or D (right).");
                System.out.println("Enter 'back' to leave, or 'reset' to start over.");
                String input = scan.nextLine();
                wipePage();
                if (input.equalsIgnoreCase("back"))
                {

                    saveScores(highscore, score, testScore, exp, lvl);
                    //lvl = (exp / 10) + 1;
                    saveBoard(grid);
                    break backToMenu;
                }
                else if (input.equalsIgnoreCase("reset"))
                {
                    for (int y = 0; y < grid.length; y++)
                    {
                        for (int x = 0; x < grid.length; x++)
                        {
                            grid[y][x] = 0;
                        }
                    }
                    addNumber(grid);
                    addNumber(grid);
                    score = 0;
                }

                int[][] testGrid = new int[4][4];
                for (int y = 0; y < grid.length; y++)
                {
                    for (int x = 0; x < grid.length; x++)
                    {
                        testGrid[y][x] = grid[y][x];
                    }
                }
                changeGrid(input, grid);
                boolean change = false;
                for (int y = 0; y < grid.length; y++)
                {
                    for (int x = 0; x < grid.length; x++)
                    {
                        if (grid[y][x] != testGrid[y][x])
                            change = true;
                    }
                }

                if (change)
                    addNumber(grid);
                display(grid);

                possibleTurn = false;
                for (int y = 0; y < grid.length; y++)
                {
                    for (int x = 0; x < grid.length; x++)
                    {
                        if (grid[y][x] == NO_NUMBER)
                            possibleTurn = true;
                        if (y > 0)
                            if (grid[y - 1][x] == grid[y][x])
                                possibleTurn = true;
                        if (y < 3)
                            if (grid[y + 1][x] == grid[y][x])
                                possibleTurn = true;
                        if (x > 0)
                            if (grid[y][x - 1] == grid[y][x])
                                possibleTurn = true;  
                        if (x < 3)
                            if (grid[y][x + 1] == grid[y][x])
                                possibleTurn = true;
                    }
                }
                if (!possibleTurn)
                    gameOver = true;
            }
            newBoard = true;
            System.out.println();
            System.out.println("Game over! Play again?");
            String continuePlaying = scan.next();
            while (!validInput)
            {
                if (continuePlaying.equalsIgnoreCase("yes"))
                {
                    wipePage();
                    playOn = true;
                    gameOver = false;
                    validInput = true;
                }
                else if (continuePlaying.equalsIgnoreCase("no"))
                {
                    playOn = false;
                    validInput = true;
                    System.out.println("Thanks for playing!");
                }
                else
                {
                    System.out.println("Please enter 'yes' or 'no'.");
                    continuePlaying = scan.next();
                }
            }
        }
    }

    public static void display (int[][] grid)
    {
        for (int y = 0; y < grid.length; y++)
        {
            for (int x = 0; x < grid.length; x++)
            {
                if (y == 0 && x == 0)
                {
                    System.out.println("~=~ 2 0 4 8 ~=~");
                    System.out.println();
                }
                if (y == 0 && x == 0 || y == 1 && x == 0 || y == 2 && x == 0 || y == 3 && x == 0)
                    System.out.println("---------------------");
                if (x == 0)
                    System.out.print("|");
                switch (grid[y][x])
                {
                    case 0:
                    System.out.print("    |");
                    break;
                    case 2:
                    System.out.print("  2 |");
                    break;
                    case 4:
                    System.out.print("  4 |");
                    break;
                    case 8:
                    System.out.print("  8 |");
                    break;
                    case 16:
                    System.out.print(" 16 |");
                    break;
                    case 32:
                    System.out.print(" 32 |");
                    break;
                    case 64:
                    System.out.print(" 64 |");
                    break;
                    case 128:
                    System.out.print(" 128|");
                    break;
                    case 256:
                    System.out.print(" 256|");
                    break;
                    case 512:
                    System.out.print(" 512|");
                    break;
                    case 1024:
                    System.out.print("1024|");
                    break;
                    case 2048:
                    System.out.print("2048|");
                    break;
                    case 4096:
                    System.out.print("4096|");
                    break;
                    case 8192:
                    System.out.print("8192|");
                    break;
                }

                if (y == 1 && x == 3)
                    System.out.print("     Score: "+score);

                if (y == 2 && x == 3)
                    System.out.print("     Highscore: "+highscore);

                if (x == 3)
                    System.out.println();

                if (x == 3 && y == 3)
                    System.out.println("---------------------");
            }
        }
    }

    public static void wipePage()
    {
        System.out.print("\f");
    }

    public static int[][] changeGrid (String input, int[][] grid)
    {
        final int NO_NUMBER = 0;
        boolean[][] used = new boolean[4][4];
        /*if (input.equalsIgnoreCase("quit"))
        {
        wipePage();
        System.out.println("Thanks for playing!");
        System.exit(0);
        }
        else*/ if (input.equalsIgnoreCase("W"))
        {
            for (int y = 0; y < grid.length; y++)
            {
                for (int x = 0; x < grid.length; x++)
                {
                    if (grid[y][x] != NO_NUMBER && y != 0)
                    {
                        int check = 1;
                        label:
                        while (y-check >= 0)
                        {
                            if (grid[y-check][x] == NO_NUMBER)
                            {
                                grid[y-check][x] = grid[y-check+1][x];
                                grid[y-check+1][x] = NO_NUMBER;

                                check++;
                            }
                            else
                            {
                                if (grid[y-check][x] == grid[y-check+1][x] && used[y-check][x] != true)
                                {
                                    grid[y-check][x] = grid[y-check][x]*2;
                                    score += grid[y-check][x];
                                    testScore += grid[y-check][x];
                                    used[y-check][x] = true;
                                    grid[y-check+1][x] = NO_NUMBER;
                                }
                                else
                                    break label;
                            }
                        }
                    }
                }
            }
        }
        else if (input.equalsIgnoreCase("A"))
        {
            for (int y = 3; y >= 0; y--)
            {
                for (int x = 0; x < grid.length; x++)
                {
                    if (grid[y][x] != NO_NUMBER && x != 0)
                    {
                        int check = 1;
                        label:
                        while (x-check >= 0)
                        {
                            if (grid[y][x-check] == NO_NUMBER)
                            {
                                grid[y][x-check] = grid[y][x-check+1];
                                grid[y][x-check+1] = NO_NUMBER;

                                check++;
                            }
                            else
                            {
                                if (grid[y][x-check] == grid[y][x-check+1] && used[y][x-check] != true)
                                {
                                    grid[y][x-check] = grid[y][x-check]*2;
                                    score += grid[y][x-check];
                                    testScore += grid[y][x-check];
                                    used[y][x-check] = true;
                                    grid[y][x-check+1] = NO_NUMBER;
                                }
                                else
                                    break label;
                            }
                        }
                    }
                }
            }
        }
        else if (input.equalsIgnoreCase("S"))
        {
            for (int y = 3; y >= 0; y--)
            {
                for (int x = 3; x >= 0; x--)
                {
                    if (grid[y][x] != NO_NUMBER && y != 3)
                    {
                        int check = 1;
                        label:
                        while (y+check <= 3)
                        {
                            if (grid[y+check][x] == NO_NUMBER)
                            {
                                grid[y+check][x] = grid[y+check-1][x];
                                grid[y+check-1][x] = NO_NUMBER;

                                check++;
                            }
                            else
                            {
                                if (grid[y+check][x] == grid[y+check-1][x] && used[y+check][x] != true)
                                {
                                    grid[y+check][x] = grid[y+check][x]*2;
                                    score += grid[y+check][x];
                                    testScore += grid[y+check][x];
                                    used[y+check][x] = true;
                                    grid[y+check-1][x] = NO_NUMBER;
                                }
                                else
                                    break label;
                            }
                        }
                    }
                }
            }
        }
        else if (input.equalsIgnoreCase("D"))
        {
            for (int y = 0; y < grid.length; y++)
            {
                for (int x = 3; x >= 0; x--)
                {
                    if (grid[y][x] != NO_NUMBER && x != 3)
                    {
                        int check = 1;
                        label:
                        while (x+check <= 3)
                        {
                            if (grid[y][x+check] == NO_NUMBER)
                            {
                                grid[y][x+check] = grid[y][x+check-1];
                                grid[y][x+check-1] = NO_NUMBER;

                                check++;
                            }
                            else
                            {
                                if (grid[y][x+check] == grid[y][x+check-1] && used[y][x+check] != true)
                                {
                                    grid[y][x+check] = grid[y][x+check]*2;
                                    score += grid[y][x+check];
                                    testScore += grid[y][x+check];
                                    used[y][x+check] = true;
                                    grid[y][x+check-1] = NO_NUMBER;
                                }
                                else
                                    break label;
                            }
                        }
                    }
                }
            }
        }
        if (score > highscore)
        {
            highscore = score;
        }
        return grid;
    }

    public static int[][] addNumber(int[][] grid)
    {
        final int TWO_CHANCE = 9;
        final int TOTAL_CHANCE = 10;
        final int MAX_NUM_ARRAY = 4;
        final int NO_NUMBER = 0;
        boolean valid = false;
        Random ran = new Random();
        int ranNum;

        if (ran.nextInt(TOTAL_CHANCE) < TWO_CHANCE)
            ranNum = 2;
        else
            ranNum = 4;

        int numPlaceX = NO_NUMBER;
        int numPlaceY = NO_NUMBER;
        while (!valid)
        {
            numPlaceX = ran.nextInt(MAX_NUM_ARRAY);
            numPlaceY = ran.nextInt(MAX_NUM_ARRAY);
            if (grid[numPlaceY][numPlaceX] == NO_NUMBER)
                valid = true;

        }

        for (int y = 0; y < grid.length; y++)
        {
            for (int x = 0; x < grid.length; x++)
            {
                if (y == numPlaceY && x == numPlaceX)
                    grid[y][x] = ranNum;
            }
        }

        return grid;
    }

    /*public static void chooseUser ()
    {
    Scanner scan = new Scanner(System.in);
    boolean choosingUser = true;

    boolean correctPw = false;

    while (choosingUser)
    {
    System.out.println("~=~ 2 0 4 8 ~=~");
    System.out.println();
    System.out.println("CHOOSE YOUR USER");
    System.out.println();
    System.out.println("1 - "+user1);
    System.out.println("2 - "+user2);
    System.out.println("3 - "+user3);
    System.out.println("4 - "+user4);
    System.out.println("5 - "+user5);
    System.out.println();
    System.out.println("6 - Quit");
    System.out.println();
    System.out.println("Enter the corresponding number for each option.");
    String userChoice = scan.nextLine();
    if (userChoice.equals("1"))
    {
    chosenUser = user1;
    if (user1.equals("NEW USER"))
    {
    user1 = newUser();
    }
    else
    {

    user1 = getUsers(1);
    pw = getPw();
    System.out.println("Enter password. (Enter 'back' to leave.)");

    label:
    while (!correctPw)
    {
    String enteredPw = scan.nextLine();
    if (enteredPw.equals(pw))
    correctPw = true;
    else if (enteredPw.equalsIgnoreCase("back"))
    {
    wipePage();
    break label;
    }
    else
    System.out.println("Incorrect. (Enter 'back' to leave.)");
    }
    }

    if (correctPw)
    {
    chosenUser = user1;
    choosingUser = false;
    }
    }
    else if (userChoice.equals("2"))
    {
    chosenUser = user2;
    if (user2.equals("NEW USER"))
    {
    user2 = newUser();
    }
    else
    {
    user2 = getUsers(2);
    pw = getPw();
    System.out.println("Enter password. (Enter 'back' to leave.)");

    label:
    while (!correctPw)
    {
    String enteredPw = scan.nextLine();
    if (enteredPw.equals(pw))
    correctPw = true;
    else if (enteredPw.equalsIgnoreCase("back"))
    {
    wipePage();
    break label;
    }
    else
    System.out.println("Incorrect. (Enter 'back' to leave.)");
    }
    }

    if (correctPw)
    {
    chosenUser = user2;
    choosingUser = false;
    }
    }
    else if (userChoice.equals("6"))
    {
    wipePage();
    System.exit(0);
    }
    wipePage();
    saveUsers(user1, user2, user3, user4, user5);
    savePw(pw);
    }

    }*/

    /*public static String newUser()
    {
    final int MAX_LENGTH = 7;
    Scanner scan = new Scanner(System.in);
    boolean validChoice = false;
    boolean correctPw = false;
    System.out.println("Create name for new user. (Maximum length of 7.)");
    String user = "NEW USER";
    while (!validChoice)
    {
    user = scan.nextLine();
    if (user1.length() > MAX_LENGTH)
    System.out.println("That username is too long. Try again.");
    else
    validChoice = true;
    }
    user = user.toUpperCase();
    validChoice = false;
    System.out.println("Create password for new user. (Maximum length of 7.)");
    while (!validChoice)
    {
    pw = scan.nextLine();
    if (pw.length() > MAX_LENGTH)
    System.out.println("That password is too long. Try again.");
    else
    {
    validChoice = true;
    correctPw = true;
    }
    }

    return user;
    }*/

    public static int getScores (int whichScore)
    {
        File f = new File ("score.txt");
        try 
        {
            Scanner scan = new Scanner(f);
            for (int i = 0; i < whichScore; i++)
                scan.nextLine();
            return scan.nextInt();
        }
        catch (Exception e)
        {
            if (whichScore == 4)
                return 1;
            return 0;
        }
    }

    public static void saveScores (int highscore, int score, int testScore, int exp, int lvl)
    {
        File f = new File ("score.txt");
        f.delete();
        try
        {
            PrintWriter print = new PrintWriter(new File("score.txt"));
            print.println(highscore);
            print.println(score);
            print.println(testScore);
            print.println(exp);
            print.println(lvl);
            //print.println(exp);
            print.close();
        }
        catch (Exception e)
        {

        }
    }

    public static int[][] getBoard ()
    {
        File f = new File ("grid.txt");
        int[][] grid = new int[4][4];
        try 
        {
            Scanner scan = new Scanner(f);
            for (int y = 0; y < grid.length; y++)
            {
                for (int x = 0; x < grid.length; x++)
                {
                    grid[y][x] = scan.nextInt();
                }
            }
            return grid;
        }
        catch (Exception e)
        {
            //Scanner scan = new Scanner(f);
            /*for (int y = 0; y < grid.length; y++)
            {
            for (int x = 0; x < grid.length; x++)
            {
            grid[y][x] = 0;
            }
            }*/
            return grid;
        }
    }

    public static void saveBoard (int[][] grid)
    {
        File f = new File ("grid.txt");
        f.delete();
        try
        {
            PrintWriter print = new PrintWriter(new File("grid.txt"));
            for (int y = 0; y < grid.length; y++)
            {
                for (int x = 0; x < grid.length; x++)
                {
                    print.print(grid[y][x]);
                    print.print(" ");
                    if (x == 3)
                        print.println();
                }
            }
            print.close();
        }
        catch (Exception e)
        {

        }
    }

    /*public static void savePw (String pw)
    {
    File f = new File (chosenUser+"pw.txt");
    f.delete();
    try
    {
    PrintWriter print = new PrintWriter(new File(chosenUser+"pw.txt"));
    print.println(pw);
    print.close();
    }
    catch (Exception e)
    {

    }
    }*/

    /*public static String getPw ()
    {
    File f = new File (chosenUser+"pw.txt");
    try 
    {
    Scanner scan = new Scanner(f);
    return scan.nextLine();
    }
    catch (Exception e)
    {
    return "NEW PASSWORD";
    }
    }*/

    public static void saveUser (String user)
    {
        File f = new File ("user.txt");
        f.delete();
        try
        {
            PrintWriter print = new PrintWriter(new File("user.txt"));
            print.println(user);
            print.close();
        }
        catch (Exception e)
        {

        }
    }

    /*public static void saveUser1 (String user1, String user2, String user3, String user4, String user5)
    {
    File f = new File ("users.txt");
    f.delete();
    try
    {
    PrintWriter print = new PrintWriter(new File("users.txt"));
    print.println(user1);
    print.println(user2);
    print.println(user3);
    print.println(user4);
    print.println(user5);
    print.close();
    }
    catch (Exception e)
    {

    }
    }*/

    public static String getUser()
    {
        File f = new File ("user.txt");
        try 
        {
            Scanner scan = new Scanner(f);
            return scan.nextLine();
        }
        catch (Exception e)
        {
            return "NEW USER";
        }
    }

    public static void expDisplay (int exp)
    {
        for (int i = 0; i < exp; i++)
        {
            System.out.print("= ");
        }
        /*if (exp%10 == 0)
        {
        for (int i = 0; i < 10; i++)
        System.out.print("= ");
        }*/
        for (int i = exp; i < 10; i++)
        {
            System.out.print("- ");
        }
        System.out.println();
    }
    /*public static String getUsers (int amount)
    {
    File f = new File ("users.txt");
    try 
    {
    Scanner scan = new Scanner(f);
    for (int i = 0; i < amount; i++)
    {
    if (i == amount-1)
    return scan.nextLine();
    else
    scan.nextLine();
    }
    }
    catch (Exception e)
    {
    return "NEW USER";
    }
    return "NEW USER";
    }*/
}
